# ==================== main.py ====================
from director import Director
from escenas.escena_nivel import EscenaNivel
from escenas.juego_terminado import EscenaJuegoTerminado
from estado_juego import EstadoJuego

escenas_disponibles = {
    "Nivel1": lambda: EscenaNivel(1, 0, 3),
    "Nivel2": lambda: EscenaNivel(EstadoJuego.nivel, EstadoJuego.puntuacion, EstadoJuego.vidas),
    "Nivel3": lambda: EscenaNivel(EstadoJuego.nivel, EstadoJuego.puntuacion, EstadoJuego.vidas),
    "JuegoTerminado": EscenaJuegoTerminado
}

director = Director("Rompe Muros", (640, 480), escenas_disponibles)
director.ejecutar("Nivel1")


# ==================== director.py ====================
import pygame
import time

class Director:
    def __init__(self, titulo, resolucion, escenas):
        pygame.init()
        self.pantalla = pygame.display.set_mode(resolucion)
        pygame.display.set_caption(titulo)
        self.reloj = pygame.time.Clock()
        self.escenas = escenas
        self.escena_actual = None

    def ejecutar(self, escena_inicial, fps=60):
        self.escena_actual = self.escenas[escena_inicial]()
        jugando = True

        while jugando:
            self.reloj.tick(fps)
            eventos = pygame.event.get()

            for evento in eventos:
                if evento.type == pygame.QUIT:
                    jugando = False
                    self.escena_actual.jugando = False

            self.escena_actual.leer_eventos(eventos)
            self.escena_actual.actualizar()
            self.escena_actual.dibujar(self.pantalla)

            if self.escena_actual.proximaEscena:
                nueva = self.escena_actual.proximaEscena
                self.escena_actual = self.escenas[nueva]()

            jugando = self.escena_actual.jugando
            pygame.display.flip()

        time.sleep(1)


# ==================== constantes.py ====================
ANCHO = 640
ALTO = 480
color_azul = (0, 0, 64)
color_blanco = (255, 255, 255)


# ==================== estado_juego.py ====================
class EstadoJuego:
    nivel = 1
    puntuacion = 0
    vidas = 3


# ==================== escena.py ====================
class Escena:
    def __init__(self):
        self.proximaEscena = False
        self.jugando = True

    def leer_eventos(self, eventos):
        pass

    def actualizar(self):
        pass

    def dibujar(self, pantalla):
        pass

    def cambiar_escena(self, escena):
        self.proximaEscena = escena


# ==================== escenas/escena_nivel.py ====================
from escena import Escena
import pygame
from constantes import ANCHO, ALTO, color_azul, color_blanco
from sprites.bolita import Bolita
from sprites.paleta import Paleta
from muros.cargar_muro import cargar_muro
from estado_juego import EstadoJuego

class EscenaNivel(Escena):
    def __init__(self, nivel, puntuacion=0, vidas=3):
        super().__init__()
        self.nivel = nivel
        self.puntuacion = puntuacion
        self.vidas = vidas
        self.bolita = Bolita()
        self.jugador = Paleta()
        self.muro = cargar_muro(f"Nivel{nivel}")
        self.esperando_saque = True
        pygame.key.set_repeat(30)

    def leer_eventos(self, eventos):
        for evento in eventos:
            if evento.type == pygame.KEYDOWN:
                self.jugador.update(evento)
                if self.esperando_saque and evento.key == pygame.K_SPACE:
                    self.esperando_saque = False
                    if self.bolita.rect.centerx < ANCHO / 2:
                        self.bolita.speed = [3, -3]
                    else:
                        self.bolita.speed = [-3, -3]

    def actualizar(self):
        if not self.esperando_saque:
            self.bolita.update()
        else:
            self.bolita.rect.midbottom = self.jugador.rect.midtop

        if pygame.sprite.collide_rect(self.bolita, self.jugador):
            self.bolita.speed[1] = -self.bolita.speed[1]

        lista = pygame.sprite.spritecollide(self.bolita, self.muro, False)
        if lista:
            self.muro.remove(lista[0])
            self.puntuacion += 10

        if self.bolita.rect.top > ALTO:
            self.vidas -= 1
            self.esperando_saque = True

        if self.vidas <= 0:
            self.cambiar_escena('JuegoTerminado')

        if len(self.muro) == 0:
            EstadoJuego.nivel = self.nivel + 1
            EstadoJuego.puntuacion = self.puntuacion + 50
            EstadoJuego.vidas = self.vidas + 1
            self.cambiar_escena(f'Nivel{EstadoJuego.nivel}')

    def dibujar(self, pantalla):
        pantalla.fill(color_azul)
        self.mostrar_puntuacion(pantalla)
        self.mostrar_vidas(pantalla)
        pantalla.blit(self.bolita.image, self.bolita.rect)
        pantalla.blit(self.jugador.image, self.jugador.rect)
        self.muro.draw(pantalla)

    def mostrar_puntuacion(self, pantalla):
        fuente = pygame.font.SysFont('Consolas', 20)
        texto = fuente.render(str(self.puntuacion).zfill(5), True, color_blanco)
        pantalla.blit(texto, (0, 0))

    def mostrar_vidas(self, pantalla):
        fuente = pygame.font.SysFont('Consolas', 20)
        texto = fuente.render("Vidas: " + str(self.vidas).zfill(2), True, color_blanco)
        texto_rect = texto.get_rect()
        texto_rect.topright = [ANCHO, 0]
        pantalla.blit(texto, texto_rect)


# ==================== escenas/juego_terminado.py ====================
from escena import Escena
import pygame
from constantes import ANCHO, ALTO, color_blanco, color_azul

class EscenaJuegoTerminado(Escena):
    def actualizar(self):
        self.jugando = False

    def dibujar(self, pantalla):
        pantalla.fill(color_azul)
        fuente = pygame.font.SysFont('Arial', 72)
        texto = fuente.render('Juego Terminado', True, color_blanco)
        rect = texto.get_rect(center=(ANCHO // 2, ALTO // 2))
        pantalla.blit(texto, rect)


# ==================== sprites/bolita.py ====================
# dummy


# ==================== sprites/paleta.py ====================
# dummy


# ==================== sprites/muro.py ====================
# dummy


# ==================== muros/cargar_muro.py ====================
from sprites.muro import Muro

def cargar_muro(nombre):
    if nombre == "Nivel1":
        return Muro(40)
    elif nombre == "Nivel2":
        return Muro(50)
    elif nombre == "Nivel3":
        return Muro(60)
    else:
        return Muro(20)


